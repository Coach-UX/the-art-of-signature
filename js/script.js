var canvas = document.getElementById('canvas');

// install plugin
Matter.use(
  'matter-attractors'
);

// variables
var Engine = Matter.Engine,
    World = Matter.World,
    Body = Matter.Body,
    Bodies = Matter.Bodies,
    Common = Matter.Common,
    MouseConstraint = Matter.MouseConstraint,
    Events = Matter.Events,
    Render = Matter.Render,
    Mouse = Matter.Mouse,
    Vertices = Matter.Vertices,
    height = window.innerHeight,
    width = window.innerWidth;

// create engine
var engine = Engine.create();

// create renderer
var render = Render.create({
    element: canvas,
    engine: engine,
    options: {
        wireframes: false,
        showAngleIndicator: false,
        background: 'transparent',
        height: height,
        width: width
    }
});
Render.run(render);

// create world
var world = engine.world;
world.gravity.x = 0;
world.gravity.y = 0.01;
world.bodies = [];

// create a body with an attractor
var attractiveBody = Bodies.circle(width / 2, height / 2, 70, {
  render: {
    fillStyle: '#718FC6'
  },
  isStatic: true,

  plugin: {
    attractors: [
      function(bodyA, bodyB) {
        return {
          x: (bodyA.position.x - bodyB.position.x) * 1e-6,
          y: (bodyA.position.y - bodyB.position.y) * 1e-6,
        };
      }
    ]
  }
});
World.add(world, attractiveBody);

// randomize starting starting X & Y positions
let randomX = Common.random(width/4, width),
    randomY = Common.random(0, height-height/3);

var cherries = Matter.Vertices.fromPath ("973.269042318088 -1226.765515989 976.424783903392 -1199.57353031059 984.570911713865 -1199.02603700146 1001.9569231968 -1098.61693700326 1067.868246157 -1076.20016578015 1187.92864148342 -1086.11463662263 1202.77512319583 -1074.83177934166 1223.48363309581 -1075.51816812594 1237.93784303917 -1089.63090860927 1250.47681226989 -1076.41286385861 1270.92496679733 -1077.09062309839 1283.23209598685 -1093.14718059571 1270.36568467073 -1141.98429148958 1297.71446677169 -1140.42150394218 1271.53777533055 -1178.70979888225 1228.49600159475 -1197.20278487235 1230.25413758576 -1223.50970860757 1139.87292435572 -1254.50499498452 1133.56904231595 -1274.43053622917 1117.60320178676 -1278.85843428289 1120.46831229169 -1298.39327864079 1155.89149672827 -1272.86774868156 1116.43111112379 -1312.13177933778 1110.57065781786 -1281.07238330979");

var gianni = Matter.Vertices.fromPath ("-728.577195833556 -213.600000004411 -862.530414281164 -85.897931739546 -928.614002056209 -191.274463586538 -913.432637294354 -106.437425233436 -948.260474088615 -26.0654941598696 -973.265074868015 -58.2142665875472 -995.633362960582 -21.2334920893118 -992.018525447153 38.2320506996984 -934.865152239793 51.6273725424653 -951.832559908906 88.2412522538089 -931.293066409519 159.682968761335 -905.395444175207 159.682968760171 -890.214079420329 89.1342737073992 -867.888543010115 118.603981766131 -862.105279383506 184.687569536185 -845.563006598258 184.687569535443 -847.349049513496 128.42721778512 -813.414234170779 155.217861474262 -817.879341451235 184.687569534199 -800.911933780133 192.366507901947 -797.339847955897 165.934118949808 -775.014311546366 180.222462250495 -756.482448413572 141.780304047274 -772.335247186801 -31.4236229059024 -658.033362963766 -92.1490819432147 -767.870139906548 -65.3584382476147 -765.191075539084 -101.079296501961 -658.033362967856 -183.237270491487 -763.00832255242 -129.238916295308 -770.549204279302 -147.516412232211");

var baby = Matter.Vertices.fromPath ("1517.65164252622 1087.50933199844 1473.27963891466 1112.06742205021 1452.90758694167 1114.85811410224 1432.16344269494 1111.78835284694 1406.11698355148 1117.36973695034 1372.62867893778 1109.18370693525 1343.60548160491 1079.78841733151 1318.30320700736 1061.92798820554 1306.27860988477 1038.94764704043 1284.81490239115 997.928117168222 1284.81490239092 992.718825339481 1303.88423227358 997.351449446392 1317.00088404768 1006.30019332011 1337.62024119008 975.60013447497 1361.8380030009 977.463042123282 1373.744955752 970.393288926599 1405.37792564397 971.95777204712 1419.70347817228 955.678735081658 1439.41750932419 949.928213882165 1439.3778571316 933.074129466774 1447.74993328453 924.004380300286 1458.63363228371 920.743013897467 1471.05221191133 924.562518709463 1480.74986678937 934.050871682805 1481.84288784326 946.097359036721 1478.3777785467 951.353162399801 1498.12367837267 967.993549828239 1526.30278787898 960.8119128776 1537.18648687845 963.881674133335 1559.88924220645 955.957804280477 1588.40081266356 991.469360629587 1583.37756697334 1031.09718775559 1570.30402354273 1046.5412067241 1546.73273163025 1034.16945541244 1518.68002292236 1044.70181150767 1508.54050846995 1043.95762696116 1495.05216355687 1057.91108721732");

var flower = Matter.Vertices.fromPath ("756.635065507818 285.29677085913 777.844325095437 266.878203320841 797.379169452915 260.180542397298 819.704705863258 292.552570189186 823.499999997035 292.552570189015 848.209811235463 265.710102084287 870.49530119187 256.61023621839 885.00689985856 276.92469470003 880.541792577484 292.552570186454 885.006899859537 298.692092698699 916.820789242381 302.599061568826 924.076588575897 316.552521824058 919.053342884599 332.180397310505 900.076636937693 346.691995977137 900.634775348091 350.598964848667 937.658161941918 357.591297622143 948.700000001496 391.901207202956 930.216111093228 425.38951181712 877.75110053166 410.319774743475 861.00694822725 460.610236218816 823.500000004353 455.528985973913 816.914013818687 438.226695257319 782.867570796032 458.319678026848 749.937404591617 429.29648069677 771.70480258848 389.110515159791 741.565328437255 406.412805878033 705.844470182178 387.43609993208 698.299999999692 351.715241678194 710.309577461076 323.250182756321 777.28618668767 321.575767522647");

var newyork = Matter.Vertices.fromPath ("2339.32955076468 1096.66654815958 2319.69814435332 1034.89923076165 2339.32955076468 988.387696576459 2402.95732953001 970.155175175866 2445.00375643342 973.131913363718 2534.30590206899 961.969145159273 2612.4452795001 999.550464780905 2706.58462469092 979.085389739422 2717.74739289537 961.969145159273 2742.67757521863 953.411022869199 2785.84027894248 966.062160167569 2776.16587983196 1012.94578662624 2820.07276810278 1002.52720296876 2857.46804158767 930.620371118457 2885.56100823552 941.50407011779 2874.0261477576 963.457514253199 2919.69814435332 977.597020645496 2874.49126309945 1086.89912598069 2825.654152205 1071.36427356283 2829.37507493982 1111.55023909884 2799.6076930613 1115.5129560753 2748.91012079944 1059.5503438798 2616.91038678188 1091.45725633084 2577.56162886121 1017.96903231824 2566.67792986187 1055.73639807661 2494.95047352293 1063.93382693596 2418.58520501623 1046.43409123957 2403.32942180348 1075.82938084461");

var vase = Matter.Vertices.fromPath ("999.983412379068 -24.6819904098938 1059.70422227302 -20.9363277064731 1118.86689375165 -130.728288357461 1044.57354727065 -198.222503343417 1052.68547740227 -297.728849156229 1026.21591764739 -294.820980958642 1005.76812339805 -432.681168282621 972.634630257906 -476.215964278468 1024.54150240657 -520.936327704894 897.768123394895 -503.006607965775 925.751003801566 -424.309092125693 969.843938207345 -463.936919253454 1005.76812340154 -355.099929261727 967.053246159918 -381.890572950659 1002.21596600815 -287.565181624675 1002.73837830391 -197.711179914237 935.23935678855 -130.170149938993 958.681170020514 -71.565616866710");

var pretzel = Matter.Vertices.fromPath ("610.58884816492 293.266537090245 669.007335101775 299.033967326586 697.84448629543 273.173554318328 739.332774788058 260.708463154833 799.611723092817 277.527495726519 839.797688630119 306.475812788549 878.86737734424 274.475877267383 932.387203509644 262.898621407254 962.588138877209 266.289847247033 997.936904859289 296.057229123966 1045.5647158645 286.75492228479 1053.07995106045 296.801413668454 1030.30893265655 393.545404774668 1006.12293488218 436.336016226125 949.564909315664 495.870779985706 967.425338444031 523.777700496015 960.355585248399 535.312560974258 936.541679745583 535.312560975328 914.216143335924 518.196316396181 879.239469629431 535.3125609779 815.239598590613 535.312560980774 772.821079413355 527.126530966087 754.58855801246 520.428870044238 733.379298424433 529.731176882226 703.611916545745 526.010254148749 702.495639724499 508.149825021686 719.239792030431 491.777764987748 686.123579689409 465.731305845531 659.891074407316 429.08021690878 607.530817756709 326.900702572115 603.679951060551 299.03396732952");


// main bodies
var bodies = function () {
  return [
    Bodies.fromVertices(randomX, randomY, cherries, {
      density: .000008,
      frictionAir: 0.006,
      restitution: 0.3,
      friction: 0.01,
      render: {
        sprite: {
          texture: 'img/cherries.png',
          xScale: .7,yScale:.7
        }}}),
    Bodies.fromVertices(Common.random(width/2, width), Common.random(0, height/2), gianni, {
      density: .000008,
      frictionAir: 0.006,
      restitution: 0.0003,
      friction: 0.0001,
      render: {
        sprite: {
          texture: ('img/gianni.png'),
          xScale: .8,yScale: .8
      }}}),
    Bodies.fromVertices(randomX, randomY, baby, {
      density: .000008,
      frictionAir: 0.0006,
      restitution: 0.3,
      friction: 0.01,
      render: {
        sprite: {
          texture: 'img/baby.png',
          xScale: .5, yScale: .5
        }}}),
    Bodies.fromVertices(randomX, height-500, flower, {
      density: .000008,
      frictionAir: 0.006,
      restitution: 0.3,
      friction: 0.01,
      render: {
        sprite: {
          texture: 'img/flower.png',
          xScale: .8, yScale: .8
      }}}),
    Bodies.fromVertices(randomX, randomY, newyork, {
      density: .000008,
      frictionAir: 0.006,
      restitution: 0.3,
      friction: 0.01,
      render: {
        sprite: {
          texture: 'img/newyork.png',
          xScale: .8, yScale: .8
      }}}),
    Bodies.circle(randomX, randomY, 120, {
      density: .000008,
      frictionAir: 0.006,
      restitution: 0.3,
      friction: 0.01,
      render: {
        sprite: {
          texture: 'img/cactus.png',
          xScale: 1, yScale: 1
      }}}),
    Bodies.fromVertices(randomX, randomY, vase, {
      density: .000008,
      frictionAir: 0.006,
      restitution: 0.3,
      friction: 0.01,
      render: {
        sprite: {
          texture: 'img/vase.png',
          xScale: 1, yScale: 1
      }}}),
   Bodies.fromVertices(randomY, randomY, pretzel, {
      density: .000008,
      frictionAir: 0.0006,
      restitution: 0.3,
      friction: 0.01,
      render: {
        sprite: {
          texture: 'img/pretzel.png',
          xScale: .6, yScale: .6
      }}})
  ]
};
World.add(world, bodies());


// add mouse control
var mouse = Mouse.create(render.canvas);

// allow page scrolling while on the canvas
mouse.element.removeEventListener("mousewheel", mouse.mousewheel);
mouse.element.removeEventListener("DOMMouseScroll", mouse.mousewheel);

// smoothly move the attractor body towards the mouse
Events.on(engine, 'afterUpdate', function() {
    if (!mouse.position.x) {
      return;
    }
  Body.translate(attractiveBody, {
      x: (mouse.position.x - attractiveBody.position.x) * 0.25,
      y: (mouse.position.y - attractiveBody.position.y) * 0.25
  });
});

// add mouse constraint
var mouseConstraint = MouseConstraint.create(engine, { 
  mouse: mouse,
  constraint: {
      render: {
          visible: false
      }
  }
 });
World.add(world, mouseConstraint);

// add more objects on mouse click
Events.on(mouseConstraint, "mouseup", function(event) {
  World.add(world, bodies());
});

// run the engine
Engine.run(engine);









// ARCHIVED SNIPPETS
// alt scrolling fix
      // var mouse = Matter.Mouse.create(canvas,  {
      //     enabledEvents: {
      //       mousewheel: false,
      //     }
      //   }
      // );
 // add boundaries to prevent objects from going outside of the canvas
      // var offset = 10,
      //   options = {
      //       isStatic: true
      //   };
      // World.add(world, [
      //     Bodies.rectangle(width/2, -offset, width + 2 * offset, 20, options),
      //     Bodies.rectangle(width/2, height + offset, width + 2 * offset, 20, options),
      //     Bodies.rectangle(width + offset, height/2, 20, height + 2 * offset, options),
      //     Bodies.rectangle(-offset, height/2, 20, height + 2 * offset, options)
      // ]);

 // gyroscope
      // var gyroscope = function(event) {
      //     var orientation = typeof window.orientation !== 'undefined' ? window.orientation : 0,
      //         gravity = engine.world.gravity;
      //
      //     if (orientation === 0) {
      //         gravity.x = Common.clamp(event.gamma, -90, 90) / 90;
      //         gravity.y = Common.clamp(event.beta, -90, 90) / 90;
      //     }
      //     else {
      //
      //     }
      // };
      // window.addEventListener('devicemotion', gyroscope);
 // color pallette
      // cream: #F3E0D2
      // tan: #CCA379
      // orange: #F08E41
      // blue: #6492C9
      // magenta: #E4747A
      // purple: #C28C9F
